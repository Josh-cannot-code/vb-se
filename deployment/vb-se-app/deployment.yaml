apiVersion: apps/v1
kind: Deployment
metadata:
  name: vb-se-deployment
  namespace: vb-se
  labels:
    app: vb-se
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vb-se
  template:
    metadata:
      labels:
        app: vb-se
    spec:
      containers:
      - name: vb-se
        image: ghcr.io/josh-cannot-code/docker-vb-se:latest
        imagePullPolicy: Always
        env:
        - name: YOUTUBE_API_KEY
          valueFrom:
            secretKeyRef:
              name: youtube-api-key
              key: api-key
        - name: ENVIRONMENT
          value: "prod"
        - name: OPENSEARCH_HOST
          valueFrom:
            configMapKeyRef:
              name: vb-se-config
              key: opensearch_host
        - name: OPENSEARCH_PORT
          valueFrom:
            configMapKeyRef:
              name: vb-se-config
              key: opensearch_port
        - name: OPENSEARCH_USERNAME
          valueFrom:
            configMapKeyRef:
              name: vb-se-config
              key: opensearch_username
        - name: OPENSEARCH_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: vb-se-config
              key: opensearch_password
        - name: OPENSEARCH_MODEL_ID
          valueFrom:
            configMapKeyRef:
              name: vb-se-config
              key: opensearch_model_id
        ports:
        - containerPort: 3002
          name: vb-se-port
      - name: cloudflared
        image: cloudflare/cloudflared:2022.3.0
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --protocol
        - http2
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            # Cloudflared has a /ready endpoint which returns 200 if and only if
            # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        # Each tunnel has an associated "credentials file" which authorizes machines
        # to run the tunnel. cloudflared will read this file from its local filesystem,
        # and it'll be stored in a k8s secret.
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
          # ```
          secretName: tunnel-credentials
      # Create a config.yaml file from the config
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml 
